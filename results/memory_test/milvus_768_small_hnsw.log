Profiling: Insertion
Insertion Time: 116.63100075721741
Number of entities in Milvus: 100000
Filename: /ssddata/zchenhj/vectorDB_study/milvus_mem.py

base_data_path = '/ssddata/vecDB_publi_data/test_data_0919/wikisum_bert-nli-mean_base_small.npy'
base_data_size = 293M

query_data_path = '/ssddata/vecDB_publi_data/test_data_0919/wikisum_bert-nli-mean_query_large.npy'
query_data_size = 6MB (Only 2,000 points are selected)


Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    80    432.4 MiB    432.4 MiB           1       @profile
    81                                             def insert_entitiy(self, batch_size=0):
    82                                                 
    83    432.4 MiB      0.0 MiB           1           assert self.collection is not None
    84                                                 
    85    436.5 MiB      0.0 MiB           2           def _batch_insert(collection, entities, batch_size):
    86    436.5 MiB      0.0 MiB           1               num_entities = len(entities[0])
    87    577.4 MiB     -0.7 MiB           6               for i in tqdm(range(0, int(num_entities / batch_size) + 1)):    
    88    577.4 MiB     -0.9 MiB           6                   start_idx = i * batch_size
    89    577.4 MiB     -0.9 MiB           6                   end_index = min((i + 1) * batch_size, num_entities)
    90    577.4 MiB     -0.9 MiB           6                   if start_idx == end_index:
    91    577.2 MiB     -0.2 MiB           1                       break
    92    576.9 MiB     -0.6 MiB           5                   batch = [entities[0][start_idx:end_index], entities[1][start_idx:end_index]]
    93    577.4 MiB    139.7 MiB           5                   collection.insert(batch)
    94                                         
    95    436.5 MiB      0.0 MiB           1           entities = [
    96    436.5 MiB      4.1 MiB      100003               [int(i) for i in range(self.num_entities)], 
    97    436.5 MiB      0.0 MiB           1               self.data
    98                                                 ]
    99                                                 
   100    436.5 MiB      0.0 MiB           1           if batch_size == 0:
   101                                                     _ = self.collection.insert(entities)
   102                                                 else:
   103    436.5 MiB      0.0 MiB           1               start_insert_time = time.time()
   104    577.2 MiB      0.0 MiB           1               _batch_insert(self.collection, entities, batch_size)
   105    577.2 MiB      0.0 MiB           1               end_insert_time = time.time()
   106    577.2 MiB      0.0 MiB           1               print(f"Insertion Time: {end_insert_time - start_insert_time}")
   107    577.2 MiB      0.0 MiB           1               self.collection.flush()
   108    577.2 MiB      0.0 MiB           1               print(f"Number of entities in Milvus: {self.collection.num_entities}")


Profiling: Index Creation
Index Time: 10.682389497756958
Filename: /ssddata/zchenhj/vectorDB_study/milvus_mem.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   111    573.4 MiB    573.4 MiB           1       @profile
   112                                             def create_index(self, indexType: str):
   113                                                 
   114    573.4 MiB      0.0 MiB           1           assert indexType in config_index_param
   115    573.4 MiB      0.0 MiB           1           self.indexType = indexType
   116                                                 
   117    573.4 MiB      0.0 MiB           1           index = {
   118    573.4 MiB      0.0 MiB           1               "index_type": indexType,
   119    573.4 MiB      0.0 MiB           1               "metric_type": "L2",
   120    573.4 MiB      0.0 MiB           1               "params": config_index_param[indexType],
   121                                                 }
   122    573.4 MiB      0.0 MiB           1           self.collection.drop_index()
   123    573.4 MiB      0.0 MiB           1           start_create_index = time.time()
   124    573.4 MiB      0.0 MiB           1           self.collection.create_index(self.data_name, index)
   125    573.4 MiB      0.0 MiB           1           end_create_index = time.time()
   126    573.4 MiB      0.0 MiB           1           self.time_create_index = end_create_index - start_create_index
   127    573.4 MiB      0.0 MiB           1           print(f"Index Time: {end_create_index - start_create_index}")


Profiling: ANN Search
Query Time: 6.020898103713989
Filename: /ssddata/zchenhj/vectorDB_study/milvus_mem.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   130    573.4 MiB    573.4 MiB           1       @profile
   131                                             def topk_anns(self, top_k: int, metricType: str):
   132                                                 
   133    573.4 MiB      0.0 MiB           1           self.collection.load()
   134    573.4 MiB      0.0 MiB           1           self.top_k = top_k
   135    573.4 MiB      0.0 MiB           1           self.metric = metricType
   136                                                 
   137    573.4 MiB      0.0 MiB           1           search_params = {
   138    573.4 MiB      0.0 MiB           1               "metric_type": metricType,
   139    573.4 MiB      0.0 MiB           1               "params": config_search_param[self.indexType],
   140                                                 }
   141                                                 
   142    573.4 MiB      0.0 MiB           1           query_start_time = time.time()
   143    626.9 MiB     53.4 MiB           1           result = self.collection.search(self.vectors_to_search, self.data_name, search_params, limit=top_k)
   144    626.9 MiB      0.0 MiB           1           query_end_time = time.time()
   145    626.9 MiB      0.0 MiB           1           self.time_query = query_end_time - query_start_time
   146    626.9 MiB      0.0 MiB           1           print(f"Query Time: {self.time_query}")
   147                                                 
   148    626.9 MiB      0.0 MiB           1           self.anns_result = []
   149    627.4 MiB      0.0 MiB        2001           for hits in result:
   150    627.4 MiB      0.0 MiB        2000               curr_result = set() # top-k neighbour of the current query point
   151    627.4 MiB      0.1 MiB      202000               for hit in hits:
   152    627.4 MiB      0.4 MiB      200000                   curr_result.add(int(hit.id))
   153    627.4 MiB      0.0 MiB        2000               self.anns_result.append(curr_result)


